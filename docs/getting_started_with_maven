Getting started with JtestR - with maven
----------------------------------------

JtestR currently only supports Maven2. It should be fairly simple to integrate it with Maven 1 too, though, since the Ant tasks are available. These instructions are only for Maven2. To test your project using Maven2, you need to add this to your pom.xml:

{noformat}
<plugins>
  <plugin>
    <groupId>org.jtestr</groupId>
    <artifactId>jtestr</artifactId>
    <version>0.6</version>
    <executions>
      <execution>
        <goals>
          <goal>test</goal>
        </goals>
      </execution>
    </executions>
  </plugin>
</plugins>
{noformat}

That's the basic parts needed for standalone test execution. Exactly like with Ant, there are several configuration values you can add, though. These are added in the regular manner of Maven plugin configuration:

{noformat}
<plugins>
  <plugin>
    <groupId>org.jtestr</groupId>
    <artifactId>jtestr</artifactId>
    <version>0.6</version>
    <configuration>
      <tests>ruby_tests</tests>
    </configuration>
    <executions>
      <execution>
        <goals>
          <goal>test</goal>
        </goals>
      </execution>
    </executions>
  </plugin>
</plugins>
{noformat}

The configurations supported are:

* failOnError (boolean, default is true): Whether JtestR should fail the Maven build when the testing fails.
* port (int, default is 22332): The port to try checking for a JtestR server on.
* tests (String, default is "test"): The directory to look for JtestR configuration file and tests.
* groups (String, default is ""): The groups to run, separated by comma. If not specificed, runs default groups.
* logging (String, default is "WARN"): The logging level, valid values are: "NONE","ERR","WARN","INFO","DEBUG"
* configFile (String, default is "jtestr_config.rb"): The name of the config file. Note that this is not a path, just the name of the file itself.
* outputLevel (String, default is "QUIET"): The unified result handling in JtestR has different levels of verbosity. Valid values are: "NONE","QUIET","NORMAL","VERBOSE","DEFAULT"
* output (String, default is "STDOUT"): The place output from test runs should end up. This can be any Ruby code. The resulting object needs to be IO-like.
* load (String, default is ""): A string detailing the load strategy to use if any needed. Format: "rspec = abc, foo; active_support=another,dir"

You can also set a system property to use a specific test. This isn't one of the options to configure, but instead is only a Java system property:

* jtestr.test (String, default is ""): The name of a specific test to run. If empty it isn't used.

You can use another Maven goal to start a background server, just like with Ant. The best way of starting it is by running this command:

{noformat}
mvn org.jtestr:jtestr:server
{noformat}

You can provide two other pieces of configuration that is only for the background server:

* runtimes (int, default is 3): How many runtimes to cycle through for testing. 
* debug (boolean, default is true): Should the server write information about each connection or not?

The port argument affects both the test goal and the server goal.

Also note that JtestR work as expected in projects using submodules. Look in the source distribution, in the examples/multi_maven_project for an example that shows how it could look.

If you define your project dependencies in the Maven POM you do not need to add these dependencies to the classpath in the configuration file. The default classpath in a Maven2 project will instead be the default test classpath that Maven uses.


The option for specifying load strategy is a bit special and needs to be explained. JtestR includes several different libraries, and uses these internal libraries for everything. In some cases this might not be ideal, and in that case you might want to use a version of a library that you have locally instead. You accomplish that by setting the "load" parameter. This parameter should be a list of keys and values. The values can be separated with commas, while each key value pair should be separated with semi colons. The value should be one or more directories where the code for the library lives. So for example, say that you have ActiveSupport in the directory /usr/lib/ActiveSupport-2.1.1, and you need something else on the load path for ActiveSupport to work, which lives in /usr/lib/RubyFoobar-1.2. Then you can specify this by setting load to be the string "active_support = /usr/lib/ActiveSupport-2.1.1, /usr/lib/RubyFoobar-1.2". Note that spaces are ignored and can be added for readability. The only keys supported at this point is: "active_support", "expectations", "mocha, "spec" and "dust". Using this feature might fail in strange ways, since JtestR is written based on the versions of the libraries bundled.

That is really all there is to the Maven2 integration.
